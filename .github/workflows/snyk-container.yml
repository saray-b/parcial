name: Snyk Docker Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar cada martes a las 8:00 UTC
    - cron: '0 8 * * 2'
  workflow_dispatch: # Permite ejecución manual

jobs:
  snyk-docker-scan:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write # Necesario para subir resultados SARIF
      actions: read # Necesario para algunas acciones
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      id: build
      run: |
        # Crear un tag único para la imagen
        IMAGE_TAG="snyk-scan:${{ github.sha }}"
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Construir la imagen
        docker build -t "$IMAGE_TAG" .
        
        # Verificar que la imagen se construyó correctamente
        docker images "$IMAGE_TAG"
      continue-on-error: false
      
    - name: Run Snyk to check Docker image for vulnerabilities
      id: snyk-scan
      continue-on-error: true # Continuar aunque Snyk encuentre vulnerabilidades
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ steps.build.outputs.image_tag }}
        args: |
          --org=${{ vars.SNYK_ORG }}
          --severity-threshold=low
          --sarif-file-output=snyk-docker.sarif
          --json-file-output=snyk-docker.json
    
    - name: Check if SARIF file exists
      id: check-sarif
      run: |
        if [ -f "snyk-docker.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Archivo SARIF generado correctamente"
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ No se generó archivo SARIF"
        fi
    
    - name: Fix SARIF security-severity null values
      if: steps.check-sarif.outputs.sarif_exists == 'true'
      run: |
        echo "🔧 Corrigiendo valores null en security-severity..."
        
        # Verificar si el archivo contiene "security-severity": "null"
        if grep -q '"security-severity": "null"' snyk-docker.sarif; then
          echo "Encontrados valores null, reemplazando por '0'..."
          sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk-docker.sarif
          echo "✅ Valores corregidos"
        else
          echo "ℹ️ No se encontraron valores null para corregir"
        fi
        
        # Validar que el archivo SARIF sigue siendo válido JSON
        if jq empty snyk-docker.sarif 2>/dev/null; then
          echo "✅ Archivo SARIF sigue siendo JSON válido"
        else
          echo "❌ Error: El archivo SARIF no es JSON válido después de las modificaciones"
          exit 1
        fi
    
    - name: Upload SARIF file to GitHub Code Scanning
      if: steps.check-sarif.outputs.sarif_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk-docker.sarif
        category: snyk-docker
    
    - name: Upload Snyk results as artifacts
      if: always() # Siempre subir artefactos, incluso si hay fallos
      uses: actions/upload-artifact@v4
      with:
        name: snyk-docker-results
        path: |
          snyk-docker.sarif
          snyk-docker.json
        retention-days: 30
    
    - name: Display scan summary
      if: always()
      run: |
        echo "## 📊 Resumen del Escaneo de Seguridad Docker" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.snyk-scan.outcome }}" = "success" ]; then
          echo "✅ **Estado**: Escaneo completado exitosamente" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.snyk-scan.outcome }}" = "failure" ]; then
          echo "⚠️ **Estado**: Se encontraron vulnerabilidades" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Estado**: Error en el escaneo" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "🏷️ **Imagen analizada**: ${{ steps.build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Fecha**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "snyk-docker.sarif" ]; then
          echo "📄 **Archivo SARIF**: Generado y subido a Code Scanning" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "snyk-docker.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Detalles del Escaneo" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          head -20 snyk-docker.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && steps.check-sarif.outputs.sarif_exists == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔒 Resultado del Escaneo de Seguridad Docker\n\n';
          
          if ('${{ steps.snyk-scan.outcome }}' === 'success') {
            comment += '✅ No se encontraron vulnerabilidades críticas.\n';
          } else {
            comment += '⚠️ Se encontraron vulnerabilidades. Revisa la pestaña Security para más detalles.\n';
          }
          
          comment += `\n📊 **Resultados disponibles en**: [Security tab](${context.payload.repository.html_url}/security/code-scanning)\n`;
          comment += `🏷️ **Imagen**: \`${{ steps.build.outputs.image_tag }}\`\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
